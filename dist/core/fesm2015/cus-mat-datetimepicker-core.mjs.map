{"version":3,"file":"cus-mat-datetimepicker-core.mjs","sources":["../../../projects/core/src/adapter/datetime-adapter.ts","../../../projects/core/src/adapter/datetime-formats.ts","../../../projects/core/src/adapter/native-datetime-adapter.ts","../../../projects/core/src/adapter/native-datetime-formats.ts","../../../projects/core/src/adapter/adapter.module.ts","../../../projects/core/src/datetimepicker/datetimepicker-animations.ts","../../../projects/core/src/datetimepicker/datetimepicker-errors.ts","../../../projects/core/src/datetimepicker/datetimepicker-filtertype.ts","../../../projects/core/src/datetimepicker/calendar-body.ts","../../../projects/core/src/datetimepicker/calendar-body.html","../../../projects/core/src/datetimepicker/multi-year-view.ts","../../../projects/core/src/datetimepicker/multi-year-view.html","../../../projects/core/src/datetimepicker/clock.ts","../../../projects/core/src/datetimepicker/clock.html","../../../projects/core/src/datetimepicker/month-view.ts","../../../projects/core/src/datetimepicker/month-view.html","../../../projects/core/src/datetimepicker/year-view.ts","../../../projects/core/src/datetimepicker/year-view.html","../../../projects/core/src/datetimepicker/calendar.ts","../../../projects/core/src/datetimepicker/calendar.html","../../../projects/core/src/datetimepicker/datetimepicker.ts","../../../projects/core/src/datetimepicker/datetimepicker-content.html","../../../projects/core/src/datetimepicker/datetimepicker-input.ts","../../../projects/core/src/datetimepicker/datetimepicker-toggle.ts","../../../projects/core/src/datetimepicker/datetimepicker-toggle.html","../../../projects/core/src/datetimepicker/datetimepicker.module.ts","../../../projects/core/src/cus-mat-datetimepicker-core.ts"],"sourcesContent":["import { DateAdapter } from '@angular/material/core';\r\n\r\nexport abstract class DatetimeAdapter<D> extends DateAdapter<D> {\r\n  constructor(protected _delegate: DateAdapter<D>) {\r\n    super();\r\n  }\r\n\r\n  abstract getHour(date: D): number;\r\n\r\n  abstract getMinute(date: D): number;\r\n\r\n  abstract getFirstDateOfMonth(date: D): D;\r\n\r\n  abstract isInNextMonth(startDate: D, endDate: D): boolean;\r\n\r\n  abstract getHourNames(): string[];\r\n\r\n  abstract getMinuteNames(): string[];\r\n\r\n  abstract addCalendarHours(date: D, months: number): D;\r\n\r\n  abstract addCalendarMinutes(date: D, months: number): D;\r\n\r\n  abstract createDatetime(\r\n    year: number,\r\n    month: number,\r\n    date: number,\r\n    hour: number,\r\n    minute: number\r\n  ): D;\r\n\r\n  getValidDateOrNull(obj: any): D | null {\r\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\r\n  }\r\n\r\n  compareDatetime(\r\n    first: D,\r\n    second: D,\r\n    respectMinutePart: boolean = true\r\n  ): number {\r\n    return (\r\n      this.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      (respectMinutePart && this.getMinute(first) - this.getMinute(second))\r\n    );\r\n  }\r\n\r\n  sameDatetime(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      const firstValid = this.isValid(first);\r\n      const secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !this.compareDatetime(first, second);\r\n      }\r\n      return firstValid === secondValid;\r\n    }\r\n    return first === second;\r\n  }\r\n\r\n  sameYear(first: D, second: D) {\r\n    return first && second && this.getYear(first) === this.getYear(second);\r\n  }\r\n\r\n  sameDay(first: D, second: D) {\r\n    return (\r\n      first &&\r\n      second &&\r\n      this.getDate(first) === this.getDate(second) &&\r\n      this.sameMonthAndYear(first, second)\r\n    );\r\n  }\r\n\r\n  sameHour(first: D, second: D) {\r\n    return (\r\n      first &&\r\n      second &&\r\n      this.getHour(first) === this.getHour(second) &&\r\n      this.sameDay(first, second)\r\n    );\r\n  }\r\n\r\n  sameMinute(first: D, second: D) {\r\n    return (\r\n      first &&\r\n      second &&\r\n      this.getMinute(first) === this.getMinute(second) &&\r\n      this.sameHour(first, second)\r\n    );\r\n  }\r\n\r\n  sameMonthAndYear(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      const firstValid = this.isValid(first);\r\n      const secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !(\r\n          this.getYear(first) - this.getYear(second) ||\r\n          this.getMonth(first) - this.getMonth(second)\r\n        );\r\n      }\r\n      return firstValid === secondValid;\r\n    }\r\n    return first === second;\r\n  }\r\n\r\n  // delegate\r\n  deserialize(value: any): D | null {\r\n    return this._delegate.deserialize(value);\r\n  }\r\n\r\n  clone(date: D): D {\r\n    return this._delegate.clone(date);\r\n  }\r\n\r\n  addCalendarYears(date: D, years: number): D {\r\n    return this._delegate.addCalendarYears(date, years);\r\n  }\r\n\r\n  addCalendarMonths(date: D, months: number): D {\r\n    return this._delegate.addCalendarMonths(date, months);\r\n  }\r\n\r\n  addCalendarDays(date: D, days: number): D {\r\n    return this._delegate.addCalendarDays(date, days);\r\n  }\r\n\r\n  getYear(date: D): number {\r\n    return this._delegate.getYear(date);\r\n  }\r\n\r\n  getMonth(date: D): number {\r\n    return this._delegate.getMonth(date);\r\n  }\r\n\r\n  getDate(date: D): number {\r\n    return this._delegate.getDate(date);\r\n  }\r\n\r\n  getDayOfWeek(date: D): number {\r\n    return this._delegate.getDayOfWeek(date);\r\n  }\r\n\r\n  getMonthNames(style): string[] {\r\n    return this._delegate.getMonthNames(style);\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._delegate.getDateNames();\r\n  }\r\n\r\n  getDayOfWeekNames(style): string[] {\r\n    return this._delegate.getDayOfWeekNames(style);\r\n  }\r\n\r\n  getYearName(date: D): string {\r\n    return this._delegate.getYearName(date);\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._delegate.getFirstDayOfWeek();\r\n  }\r\n\r\n  getNumDaysInMonth(date: D): number {\r\n    return this._delegate.getNumDaysInMonth(date);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): D {\r\n    return this._delegate.createDate(year, month, date);\r\n  }\r\n\r\n  today(): D {\r\n    return this._delegate.today();\r\n  }\r\n\r\n  parse(value: any, parseFormat: any): D | null {\r\n    return this._delegate.parse(value, parseFormat);\r\n  }\r\n\r\n  format(date: D, displayFormat: any): string {\r\n    return this._delegate.format(date, displayFormat);\r\n  }\r\n\r\n  toIso8601(date: D): string {\r\n    return this._delegate.toIso8601(date);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return this._delegate.isDateInstance(obj);\r\n  }\r\n\r\n  isValid(date: D): boolean {\r\n    return this._delegate.isValid(date);\r\n  }\r\n\r\n  invalid(): D {\r\n    return this._delegate.invalid();\r\n  }\r\n\r\n  clampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDatetime(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDatetime(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface MatDatetimeFormats {\r\n  parse: {\r\n    dateInput?: any;\r\n    monthInput?: any;\r\n    timeInput?: any;\r\n    datetimeInput?: any;\r\n  };\r\n  display: {\r\n    dateInput: any;\r\n    monthInput: any;\r\n    timeInput: any;\r\n    datetimeInput: any;\r\n    monthYearLabel: any;\r\n    dateA11yLabel: any;\r\n    monthYearA11yLabel: any;\r\n    popupHeaderDateLabel: any;\r\n  };\r\n}\r\n\r\nexport const MAT_DATETIME_FORMATS = new InjectionToken<MatDatetimeFormats>(\r\n  'mat-datetime-formats'\r\n);\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { DatetimeAdapter } from './datetime-adapter';\r\n\r\n/** The default hour names to use if Intl API is not available. */\r\nconst DEFAULT_HOUR_NAMES = range(24, (i) => String(i));\r\n\r\n/** The default minute names to use if Intl API is not available. */\r\nconst DEFAULT_MINUTE_NAMES = range(60, (i) => String(i));\r\n\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n@Injectable()\r\nexport class NativeDatetimeAdapter extends DatetimeAdapter<Date> {\r\n  constructor(\r\n    @Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string,\r\n    _delegate: DateAdapter<Date>\r\n  ) {\r\n    super(_delegate);\r\n    this.setLocale(matDateLocale);\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return this.createDatetime(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHour(date),\r\n      this.getMinute(date)\r\n    );\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n\r\n  isInNextMonth(startDate: Date, endDate: Date): boolean {\r\n    const nextMonth = this.getDateInNextMonth(startDate);\r\n    return this.sameMonthAndYear(nextMonth, endDate);\r\n  }\r\n\r\n  createDatetime(\r\n    year: number,\r\n    month: number,\r\n    date: number,\r\n    hour: number,\r\n    minute: number\r\n  ): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(\r\n        `Invalid month index \"${month}\". Month index has to be between 0 and 11.`\r\n      );\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    if (hour < 0 || hour > 23) {\r\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw Error(\r\n        `Invalid minute \"${minute}\". Minute has to be between 0 and 59.`\r\n      );\r\n    }\r\n\r\n    const result = this._createDateWithOverflow(\r\n      year,\r\n      month,\r\n      date,\r\n      hour,\r\n      minute\r\n    );\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() !== month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  getFirstDateOfMonth(date: Date): Date {\r\n    const result = new Date();\r\n    result.setFullYear(date.getFullYear(), date.getMonth(), 1);\r\n    return result;\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    return DEFAULT_HOUR_NAMES;\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    return DEFAULT_MINUTE_NAMES;\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date) + months,\r\n      this.getDate(date),\r\n      this.getHour(date),\r\n      this.getMinute(date)\r\n    );\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (\r\n      this.getMonth(newDate) !==\r\n      (((this.getMonth(date) + months) % 12) + 12) % 12\r\n    ) {\r\n      newDate = this._createDateWithOverflow(\r\n        this.getYear(newDate),\r\n        this.getMonth(newDate),\r\n        0,\r\n        this.getHour(date),\r\n        this.getMinute(date)\r\n      );\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date) + days,\r\n      this.getHour(date),\r\n      this.getMinute(date)\r\n    );\r\n  }\r\n\r\n  addCalendarHours(date: Date, hours: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHour(date) + hours,\r\n      this.getMinute(date)\r\n    );\r\n  }\r\n\r\n  addCalendarMinutes(date: Date, minutes: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date),\r\n      this.getMonth(date),\r\n      this.getDate(date),\r\n      this.getHour(date),\r\n      this.getMinute(date) + minutes\r\n    );\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return (\r\n      super.toIso8601(date) +\r\n      'T' +\r\n      [\r\n        this._2digit(date.getUTCHours()),\r\n        this._2digit(date.getUTCMinutes()),\r\n      ].join(':')\r\n    );\r\n  }\r\n\r\n  private getDateInNextMonth(date: Date) {\r\n    return new Date(\r\n      date.getFullYear(),\r\n      date.getMonth() + 1,\r\n      1,\r\n      date.getHours(),\r\n      date.getMinutes()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(\r\n    year: number,\r\n    month: number,\r\n    date: number,\r\n    hours: number,\r\n    minutes: number\r\n  ) {\r\n    const result = new Date(year, month, date, hours, minutes);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { MatDatetimeFormats } from './datetime-formats';\r\n\r\nexport const MAT_NATIVE_DATETIME_FORMATS: MatDatetimeFormats = {\r\n  parse: {},\r\n  display: {\r\n    dateInput: { year: 'numeric', month: '2-digit', day: '2-digit' },\r\n    monthInput: { month: 'long' },\r\n    datetimeInput: {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    },\r\n    timeInput: { hour: '2-digit', minute: '2-digit' },\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n    popupHeaderDateLabel: { weekday: 'short', month: 'short', day: '2-digit' },\r\n  },\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { MatNativeDateModule, NativeDateModule } from '@angular/material/core';\r\nimport { DatetimeAdapter } from './datetime-adapter';\r\nimport { MAT_DATETIME_FORMATS } from './datetime-formats';\r\nimport { NativeDatetimeAdapter } from './native-datetime-adapter';\r\nimport { MAT_NATIVE_DATETIME_FORMATS } from './native-datetime-formats';\r\n\r\n// eslint-disable  max-classes-per-file\r\n@NgModule({\r\n  imports: [NativeDateModule],\r\n  providers: [\r\n    {\r\n      provide: DatetimeAdapter,\r\n      useClass: NativeDatetimeAdapter,\r\n    },\r\n  ],\r\n})\r\nexport class NativeDatetimeModule {}\r\n\r\n@NgModule({\r\n  imports: [NativeDatetimeModule, MatNativeDateModule],\r\n  providers: [\r\n    { provide: MAT_DATETIME_FORMATS, useValue: MAT_NATIVE_DATETIME_FORMATS },\r\n  ],\r\n})\r\nexport class MatNativeDatetimeModule {}\r\n","import {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  keyframes,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * This animation fades in the background color and text content of the\r\n * select's options. It is time delayed to occur 100ms after the overlay\r\n * panel has transformed in.\r\n */\r\nexport const fadeInContent: AnimationTriggerMetadata = trigger(\r\n  'fadeInContent',\r\n  [\r\n    state('showing', style({ opacity: 1 })),\r\n    transition('void => showing', [\r\n      style({ opacity: 0 }),\r\n      animate(`150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`),\r\n    ]),\r\n  ]\r\n);\r\n\r\nexport const slideCalendar: AnimationTriggerMetadata = trigger(\r\n  'slideCalendar',\r\n  [\r\n    transition('* => left', [\r\n      animate(\r\n        180,\r\n        keyframes([\r\n          style({ transform: 'translateX(100%)', offset: 0.5 }),\r\n          style({ transform: 'translateX(-100%)', offset: 0.51 }),\r\n          style({ transform: 'translateX(0)', offset: 1 }),\r\n        ])\r\n      ),\r\n    ]),\r\n    transition('* => right', [\r\n      animate(\r\n        180,\r\n        keyframes([\r\n          style({ transform: 'translateX(-100%)', offset: 0.5 }),\r\n          style({ transform: 'translateX(100%)', offset: 0.51 }),\r\n          style({ transform: 'translateX(0)', offset: 1 }),\r\n        ])\r\n      ),\r\n    ]),\r\n  ]\r\n);\r\n","/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n    `MatDatetimepickerComponent: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDatetimeModule, MatMomentDatetimeModule, or provide a ` +\r\n      `custom implementation.`\r\n  );\r\n}\r\n","export enum MatDatetimepickerFilterType {\r\n  DATE,\r\n  HOUR,\r\n  MINUTE,\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatDatetimepickerCalendarCell {\r\n  constructor(\r\n    public value: number,\r\n    public displayValue: string,\r\n    public ariaLabel: string,\r\n    public enabled: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  // eslint-disable-next-line @angular-eslint/component-selector\r\n  selector: 'tbody[matDatetimepickerCalendarBody]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.scss'],\r\n  host: {\r\n    class: 'mat-datetimepicker-calendar-body',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatetimepickerCalendarBodyComponent {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatDatetimepickerCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() selectedValueChange = new EventEmitter<number>();\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length\r\n      ? this.numCols - this.rows[0].length\r\n      : 0;\r\n  }\r\n\r\n  _cellClicked(cell: MatDatetimepickerCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber === this.activeCell;\r\n  }\r\n}\r\n","<!--\r\n  If there's not enough space in the first row, create a separate label row. We mark this row as\r\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\r\n-->\r\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\r\n  <td [attr.colspan]=\"numCols\" class=\"mat-datetimepicker-calendar-body-label\">\r\n    {{ label }}\r\n  </td>\r\n</tr>\r\n\r\n<!-- Create the first row separately so we can include a special spacer cell. -->\r\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\r\n  <!--\r\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\r\n  -->\r\n  <td\r\n    *ngIf=\"rowIndex === 0 && _firstRowOffset\"\r\n    [attr.colspan]=\"_firstRowOffset\"\r\n    aria-hidden=\"true\"\r\n    class=\"mat-datetimepicker-calendar-body-label\"\r\n  >\r\n    {{ _firstRowOffset >= labelMinRequiredCells ? label : '' }}\r\n  </td>\r\n  <td\r\n    (click)=\"_cellClicked(item)\"\r\n    *ngFor=\"let item of row; let colIndex = index\"\r\n    [attr.aria-disabled]=\"!item.enabled || null\"\r\n    [attr.aria-label]=\"item.ariaLabel\"\r\n    [class.mat-datetimepicker-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\r\n    [class.mat-datetimepicker-calendar-body-disabled]=\"!item.enabled\"\r\n    class=\"mat-datetimepicker-calendar-body-cell\"\r\n    role=\"button\"\r\n  >\r\n    <div\r\n      [attr.aria-selected]=\"selectedValue === item.value\"\r\n      [class.mat-datetimepicker-calendar-body-selected]=\"selectedValue === item.value\"\r\n      [class.mat-datetimepicker-calendar-body-today]=\"todayValue === item.value\"\r\n      class=\"mat-datetimepicker-calendar-body-cell-content\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </td>\r\n</tr>\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { createMissingDateImplError } from './datetimepicker-errors';\r\nimport { MatDatetimepickerCalendarCell } from './calendar-body';\r\nimport { slideCalendar } from './datetimepicker-animations';\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats,\r\n} from '../adapter/datetime-formats';\r\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\r\nimport { MatDatetimepickerType } from './datetimepicker-type';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n/**\r\n * An internal component used to display multiple years in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-datetimepicker-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatetimepickerMultiYearViewComponent<D>\r\n  implements AfterContentInit\r\n{\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n\r\n  @Input() type: MatDatetimepickerType = 'date';\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n  /** Emits when a new month is selected. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n  /** Grid of calendar cells representing the years in the range. */\r\n  _years: MatDatetimepickerCalendarCell[][];\r\n  /** The label for this year range (e.g. \"2000-2020\"). */\r\n  _yearLabel: string;\r\n  /** The year in this range that today falls on. Null if today is in a different range. */\r\n  _todayYear: number;\r\n  /**\r\n   * The year in this range that the selected Date falls on.\r\n   * Null if the selected Date is in a different range.\r\n   */\r\n  _selectedYear: number | null;\r\n  _calendarState: string;\r\n\r\n  constructor(\r\n    @Optional() public _adapter: DatetimeAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATETIME_FORMATS)\r\n    private _dateFormats: MatDatetimeFormats\r\n  ) {\r\n    if (!this._adapter) {\r\n      throw createMissingDateImplError('DatetimeAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATETIME_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._adapter.today();\r\n  }\r\n\r\n  private _activeDate: D;\r\n\r\n  /** The date to display in this multi year view*/\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = value || this._adapter.today();\r\n    if (\r\n      oldActiveDate &&\r\n      this._activeDate &&\r\n      !isSameMultiYearView(\r\n        this._adapter,\r\n        oldActiveDate,\r\n        this._activeDate,\r\n        this.minDate,\r\n        this.maxDate\r\n      )\r\n    ) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  private _selected: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D) {\r\n    this._selected = value;\r\n    this._selectedYear =\r\n      this._selected && this._adapter.getYear(this._selected);\r\n  }\r\n\r\n  private _minDate: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._getValidDateOrNull(this._adapter.deserialize(value));\r\n  }\r\n\r\n  private _maxDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._getValidDateOrNull(this._adapter.deserialize(value));\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(year: number) {\r\n    const month = this._adapter.getMonth(this.activeDate);\r\n    const normalizedDate = this._adapter.createDatetime(year, month, 1, 0, 0);\r\n\r\n    this.selectedChange.emit(\r\n      this._adapter.createDatetime(\r\n        year,\r\n        month,\r\n        Math.min(\r\n          this._adapter.getDate(this.activeDate),\r\n          this._adapter.getNumDaysInMonth(normalizedDate)\r\n        ),\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate)\r\n      )\r\n    );\r\n\r\n    if (this.type === 'year') {\r\n      this._userSelection.emit();\r\n    }\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return getActiveOffset(\r\n      this._adapter,\r\n      this.activeDate,\r\n      this.minDate,\r\n      this.maxDate\r\n    );\r\n  }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = '';\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  private _init() {\r\n    this._todayYear = this._adapter.getYear(this._adapter.today());\r\n    this._yearLabel = this._adapter.getYearName(this.activeDate);\r\n\r\n    const activeYear = this._adapter.getYear(this.activeDate);\r\n\r\n    const minYearOfPage =\r\n      activeYear -\r\n      getActiveOffset(\r\n        this._adapter,\r\n        this.activeDate,\r\n        this.minDate,\r\n        this.maxDate\r\n      );\r\n\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(minYearOfPage + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map((year) => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates an MatDatetimepickerCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    let yearName = this._adapter.getYearName(\r\n      this._adapter.createDate(year, 0, 1)\r\n    );\r\n    return new MatDatetimepickerCalendarCell(\r\n      year,\r\n      yearName,\r\n      yearName,\r\n      this._shouldEnableYear(year)\r\n    );\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (\r\n      year === undefined ||\r\n      year === null ||\r\n      (this.maxDate && year > this._adapter.getYear(this.maxDate)) ||\r\n      (this.minDate && year < this._adapter.getYear(this.minDate))\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._adapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (\r\n      let date = firstOfYear;\r\n      this._adapter.getYear(date) == year;\r\n      date = this._adapter.addCalendarDays(date, 1)\r\n    ) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gets the year in this years range that the given Date falls on.\r\n   * Returns null if the given Date is not in this range.\r\n   */\r\n  private _getYearInCurrentRange(date: D) {\r\n    const year = this._adapter.getYear(date);\r\n    return this._isInRange(year) ? year : null;\r\n  }\r\n\r\n  /**\r\n   * Validate if the current year is in the current range\r\n   * Returns true if is in range else returns false\r\n   */\r\n  private _isInRange(year: number): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param obj The object to check.\r\n   * @returns The given object if it is both a date instance and valid, otherwise null.\r\n   */\r\n  private _getValidDateOrNull(obj: any): D | null {\r\n    return this._adapter.isDateInstance(obj) && this._adapter.isValid(obj)\r\n      ? obj\r\n      : null;\r\n  }\r\n}\r\n\r\nexport function isSameMultiYearView<D>(\r\n  dateAdapter: DatetimeAdapter<D>,\r\n  date1: D,\r\n  date2: D,\r\n  minDate: D | null,\r\n  maxDate: D | null\r\n): boolean {\r\n  const year1 = dateAdapter.getYear(date1);\r\n  const year2 = dateAdapter.getYear(date2);\r\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n  return (\r\n    Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n    Math.floor((year2 - startingYear) / yearsPerPage)\r\n  );\r\n}\r\n\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport function getActiveOffset<D>(\r\n  dateAdapter: DatetimeAdapter<D>,\r\n  activeDate: D,\r\n  minDate: D | null,\r\n  maxDate: D | null\r\n): number {\r\n  const activeYear = dateAdapter.getYear(activeDate);\r\n  return euclideanModulo(\r\n    activeYear - getStartingYear(dateAdapter, minDate, maxDate),\r\n    yearsPerPage\r\n  );\r\n}\r\n\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear<D>(\r\n  dateAdapter: DatetimeAdapter<D>,\r\n  minDate: D | null,\r\n  maxDate: D | null\r\n): number {\r\n  let startingYear = 0;\r\n  if (maxDate) {\r\n    const maxYear = dateAdapter.getYear(maxDate);\r\n    startingYear = maxYear - yearsPerPage + 1;\r\n  } else if (minDate) {\r\n    startingYear = dateAdapter.getYear(minDate);\r\n  }\r\n  return startingYear;\r\n}\r\n\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo(a: number, b: number): number {\r\n  return ((a % b) + b) % b;\r\n}\r\n","<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\"></thead>\r\n  <tbody\r\n    (@slideCalendar.done)=\"_calendarStateDone()\"\r\n    (selectedValueChange)=\"_yearSelected($event)\"\r\n    [@slideCalendar]=\"_calendarState\"\r\n    [activeCell]=\"_getActiveCell()\"\r\n    [numCols]=\"4\"\r\n    [rows]=\"_years\"\r\n    [selectedValue]=\"_selectedYear\"\r\n    [todayValue]=\"_todayYear\"\r\n    allowDisabledSelection=\"true\"\r\n    matDatetimepickerCalendarBody\r\n    role=\"grid\"\r\n  ></tbody>\r\n</table>\r\n","import {\n  AfterContentInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\nimport { MatDatetimepickerFilterType } from './datetimepicker-filtertype';\n\nexport const CLOCK_RADIUS = 50;\nexport const CLOCK_INNER_RADIUS = 27.5;\nexport const CLOCK_OUTER_RADIUS = 41.25;\nexport const CLOCK_TICK_RADIUS = 7.0833;\n\nexport type MatClockView = 'hour' | 'minute';\n\n/**\n * A clock that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-datetimepicker-clock',\n  templateUrl: 'clock.html',\n  styleUrls: ['clock.scss'],\n  host: {\n    role: 'clock',\n    '(mousedown)': '_handleMousedown($event)',\n  },\n})\nexport class MatDatetimepickerClockComponent<D> implements AfterContentInit {\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D, type: MatDatetimepickerFilterType) => boolean;\n  @Input() interval: number = 1;\n  @Input() twelvehour: boolean = false;\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n  @Output() activeDateChange = new EventEmitter<D>();\n  /** Hours and Minutes representing the clock view. */\n  _hours: Array<Object> = [];\n  _minutes: Array<Object> = [];\n  /** Whether the clock is in hour view. */\n  _hourView: boolean = true;\n  _selectedHour: number;\n  _selectedMinute: number;\n  private _timeChanged = false;\n  private mouseMoveListener: any;\n  private mouseUpListener: any;\n\n  constructor(\n    private _element: ElementRef,\n    private _adapter: DatetimeAdapter<D>\n  ) {\n    this.mouseMoveListener = (event: any) => {\n      this._handleMousemove(event);\n    };\n    this.mouseUpListener = () => {\n      this._handleMouseup();\n    };\n  }\n\n  private _activeDate: D;\n\n  /**\n   * The date to display in this clock view.\n   */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate = this._adapter.clampDate(\n      value,\n      this.minDate,\n      this.maxDate\n    );\n    if (!this._adapter.sameMinute(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n\n  private _selected: D | null;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n\n  set selected(value: D | null) {\n    this._selected = this._adapter.getValidDateOrNull(\n      this._adapter.deserialize(value)\n    );\n    if (this._selected) {\n      this.activeDate = this._selected;\n    }\n  }\n\n  private _minDate: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n\n  set minDate(value: D | null) {\n    this._minDate = this._adapter.getValidDateOrNull(\n      this._adapter.deserialize(value)\n    );\n  }\n\n  private _maxDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n\n  set maxDate(value: D | null) {\n    this._maxDate = this._adapter.getValidDateOrNull(\n      this._adapter.deserialize(value)\n    );\n  }\n\n  /** Whether the clock should be started in hour or minute view. */\n  @Input()\n  set startView(value: MatClockView) {\n    this._hourView = value != 'minute';\n  }\n\n  get _hand(): any {\n    let hour = this._adapter.getHour(this.activeDate);\n    if (this.twelvehour) {\n      if (hour === 0) {\n        hour = 24;\n      }\n      this._selectedHour = hour > 12 ? hour - 12 : hour;\n    } else {\n      this._selectedHour = hour;\n    }\n    this._selectedMinute = this._adapter.getMinute(this.activeDate);\n    let deg = 0;\n    let radius = CLOCK_OUTER_RADIUS;\n    if (this._hourView) {\n      let outer = this._selectedHour > 0 && this._selectedHour < 13;\n      radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\n      if (this.twelvehour) {\n        radius = CLOCK_OUTER_RADIUS;\n      }\n      deg = Math.round(this._selectedHour * (360 / (24 / 2)));\n    } else {\n      deg = Math.round(this._selectedMinute * (360 / 60));\n    }\n    return {\n      transform: `rotate(${deg}deg)`,\n      height: `${radius}%`,\n      'margin-top': `${50 - radius}%`,\n    };\n  }\n\n  ngAfterContentInit() {\n    this.activeDate = this._activeDate || this._adapter.today();\n    this._init();\n  }\n\n  /** Handles mousedown events on the clock body. */\n  _handleMousedown(event: any) {\n    this._timeChanged = false;\n    this.setTime(event);\n    document.addEventListener('mousemove', this.mouseMoveListener);\n    document.addEventListener('touchmove', this.mouseMoveListener);\n    document.addEventListener('mouseup', this.mouseUpListener);\n    document.addEventListener('touchend', this.mouseUpListener);\n  }\n\n  _handleMousemove(event: any) {\n    event.preventDefault();\n    this.setTime(event);\n  }\n\n  _handleMouseup() {\n    document.removeEventListener('mousemove', this.mouseMoveListener);\n    document.removeEventListener('touchmove', this.mouseMoveListener);\n    document.removeEventListener('mouseup', this.mouseUpListener);\n    document.removeEventListener('touchend', this.mouseUpListener);\n    if (this._timeChanged) {\n      this.selectedChange.emit(this.activeDate);\n    }\n  }\n\n  /** Initializes this clock view. */\n  private _init() {\n    this._hours.length = 0;\n    this._minutes.length = 0;\n\n    let hourNames = this._adapter.getHourNames();\n    let minuteNames = this._adapter.getMinuteNames();\n\n    if (this.twelvehour) {\n      for (let i = 1; i < hourNames.length / 2 + 1; i++) {\n        let radian = (i / 6) * Math.PI;\n        let radius = CLOCK_OUTER_RADIUS;\n        const date = this._adapter.createDatetime(\n          this._adapter.getYear(this.activeDate),\n          this._adapter.getMonth(this.activeDate),\n          this._adapter.getDate(this.activeDate),\n          i + 1,\n          0\n        );\n        let enabled =\n          (!this.minDate ||\n            this._adapter.compareDatetime(date, this.minDate) >= 0) &&\n          (!this.maxDate ||\n            this._adapter.compareDatetime(date, this.maxDate) <= 0);\n        this._hours.push({\n          value: i,\n          displayValue: i === 0 ? '00' : hourNames[i],\n          enabled: enabled,\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,\n        });\n      }\n    } else {\n      for (let i = 0; i < hourNames.length; i++) {\n        let radian = (i / 6) * Math.PI;\n        let outer = i > 0 && i < 13,\n          radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\n        const date = this._adapter.createDatetime(\n          this._adapter.getYear(this.activeDate),\n          this._adapter.getMonth(this.activeDate),\n          this._adapter.getDate(this.activeDate),\n          i,\n          0\n        );\n        let enabled =\n          (!this.minDate ||\n            this._adapter.compareDatetime(date, this.minDate, false) >= 0) &&\n          (!this.maxDate ||\n            this._adapter.compareDatetime(date, this.maxDate, false) <= 0) &&\n          (!this.dateFilter ||\n            this.dateFilter(date, MatDatetimepickerFilterType.HOUR));\n        this._hours.push({\n          value: i,\n          displayValue: i === 0 ? '00' : hourNames[i],\n          enabled: enabled,\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,\n          fontSize: i > 0 && i < 13 ? '' : '80%',\n        });\n      }\n    }\n\n    for (let i = 0; i < minuteNames.length; i += 5) {\n      let radian = (i / 30) * Math.PI;\n      const date = this._adapter.createDatetime(\n        this._adapter.getYear(this.activeDate),\n        this._adapter.getMonth(this.activeDate),\n        this._adapter.getDate(this.activeDate),\n        this._adapter.getHour(this.activeDate),\n        i\n      );\n      let enabled =\n        (!this.minDate ||\n          this._adapter.compareDatetime(date, this.minDate) >= 0) &&\n        (!this.maxDate ||\n          this._adapter.compareDatetime(date, this.maxDate) <= 0) &&\n        (!this.dateFilter ||\n          this.dateFilter(date, MatDatetimepickerFilterType.MINUTE));\n      this._minutes.push({\n        value: i,\n        displayValue: i === 0 ? '00' : minuteNames[i],\n        enabled: enabled,\n        top:\n          CLOCK_RADIUS -\n          Math.cos(radian) * CLOCK_OUTER_RADIUS -\n          CLOCK_TICK_RADIUS,\n        left:\n          CLOCK_RADIUS +\n          Math.sin(radian) * CLOCK_OUTER_RADIUS -\n          CLOCK_TICK_RADIUS,\n      });\n    }\n  }\n\n  /**\n   * Set Time\n   * @param event\n   */\n  private setTime(event: any) {\n    let trigger = this._element.nativeElement;\n    let triggerRect = trigger.getBoundingClientRect();\n    let width = trigger.offsetWidth;\n    let height = trigger.offsetHeight;\n    let pageX =\n      event.pageX !== undefined ? event.pageX : event.touches[0].pageX;\n    let pageY =\n      event.pageY !== undefined ? event.pageY : event.touches[0].pageY;\n    let x = width / 2 - (pageX - triggerRect.left - window.pageXOffset);\n    let y = height / 2 - (pageY - triggerRect.top - window.pageYOffset);\n    let radian = Math.atan2(-x, y);\n    let unit =\n      Math.PI / (this._hourView ? 6 : this.interval ? 30 / this.interval : 30);\n    let z = Math.sqrt(x * x + y * y);\n    let outer =\n      this._hourView &&\n      z >\n        (width * (CLOCK_OUTER_RADIUS / 100) +\n          width * (CLOCK_INNER_RADIUS / 100)) /\n          2;\n\n    if (radian < 0) {\n      radian = Math.PI * 2 + radian;\n    }\n    let value = Math.round(radian / unit);\n\n    let date;\n    if (this._hourView) {\n      if (this.twelvehour) {\n        value = value === 0 ? 12 : value;\n      } else {\n        if (value === 12) {\n          value = 0;\n        }\n        value = outer\n          ? value === 0\n            ? 12\n            : value\n          : value === 0\n          ? 0\n          : value + 12;\n      }\n\n      // Don't close the hours view if an invalid hour is clicked.\n      if (!this._hours.find((h) => h?.['value'] === value)?.['enabled']) {\n        return;\n      }\n\n      date = this._adapter.createDatetime(\n        this._adapter.getYear(this.activeDate),\n        this._adapter.getMonth(this.activeDate),\n        this._adapter.getDate(this.activeDate),\n        value,\n        this._adapter.getMinute(this.activeDate)\n      );\n    } else {\n      if (this.interval) {\n        value *= this.interval;\n      }\n      if (value === 60) {\n        value = 0;\n      }\n\n      // Don't close the minutes view if an invalid minute is clicked.\n      if (!this._minutes.find((m) => m?.['value'] === value)?.['enabled']) {\n        return;\n      }\n\n      date = this._adapter.createDatetime(\n        this._adapter.getYear(this.activeDate),\n        this._adapter.getMonth(this.activeDate),\n        this._adapter.getDate(this.activeDate),\n        this._adapter.getHour(this.activeDate),\n        value\n      );\n    }\n\n    this._timeChanged = true;\n    this.activeDate = date;\n    this.activeDateChange.emit(this.activeDate);\n  }\n}\n","<div class=\"mat-datetimepicker-clock\">\r\n  <div class=\"mat-datetimepicker-clock-center\"></div>\r\n  <div [ngStyle]=\"_hand\" class=\"mat-datetimepicker-clock-hand\"></div>\r\n  <div [class.active]=\"_hourView\" class=\"mat-datetimepicker-clock-hours\">\r\n    <div\r\n      *ngFor=\"let item of _hours\"\r\n      [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-clock-cell-selected]=\"_selectedHour === item.value\"\r\n      [style.fontSize]=\"item.fontSize\"\r\n      [style.left]=\"item.left + '%'\"\r\n      [style.top]=\"item.top + '%'\"\r\n      class=\"mat-datetimepicker-clock-cell\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </div>\r\n  <div [class.active]=\"!_hourView\" class=\"mat-datetimepicker-clock-minutes\">\r\n    <div\r\n      *ngFor=\"let item of _minutes\"\r\n      [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-clock-cell-selected]=\"_selectedMinute === item.value\"\r\n      [style.left]=\"item.left + '%'\"\r\n      [style.top]=\"item.top + '%'\"\r\n      class=\"mat-datetimepicker-clock-cell\"\r\n    >\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats,\r\n} from '../adapter/datetime-formats';\r\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\r\nimport { MatDatetimepickerCalendarCell } from './calendar-body';\r\nimport { slideCalendar } from './datetimepicker-animations';\r\nimport { createMissingDateImplError } from './datetimepicker-errors';\r\nimport { MatDatetimepickerType } from './datetimepicker-type';\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-datetimepicker-month-view',\r\n  templateUrl: 'month-view.html',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatetimepickerMonthViewComponent<D>\r\n  implements AfterContentInit\r\n{\r\n  @Input() type: MatDatetimepickerType = 'date';\r\n\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n  /** Emits when a new date is selected. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatDatetimepickerCalendarCell[][];\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number;\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number;\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string; narrow: string }[];\r\n  _calendarState: string;\r\n\r\n  constructor(\r\n    @Optional() public _adapter: DatetimeAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATETIME_FORMATS)\r\n    private _dateFormats: MatDatetimeFormats\r\n  ) {\r\n    if (!this._adapter) {\r\n      throw createMissingDateImplError('DatetimeAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATETIME_FORMATS');\r\n    }\r\n\r\n    const firstDayOfWeek = this._adapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._adapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._adapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return { long, narrow: narrowWeekdays[i] };\r\n    });\r\n    this._weekdays = weekdays\r\n      .slice(firstDayOfWeek)\r\n      .concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._adapter.today();\r\n  }\r\n\r\n  private _activeDate: D;\r\n\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = value || this._adapter.today();\r\n    if (\r\n      oldActiveDate &&\r\n      this._activeDate &&\r\n      !this._adapter.sameMonthAndYear(oldActiveDate, this._activeDate)\r\n    ) {\r\n      this._init();\r\n      if (this._adapter.isInNextMonth(oldActiveDate, this._activeDate)) {\r\n        this.calendarState('right');\r\n      } else {\r\n        this.calendarState('left');\r\n      }\r\n    }\r\n  }\r\n\r\n  private _selected: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D) {\r\n    this._selected = value;\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    this.selectedChange.emit(\r\n      this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        this._adapter.getMonth(this.activeDate),\r\n        date,\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate)\r\n      )\r\n    );\r\n    if (this.type === 'date') {\r\n      this._userSelection.emit();\r\n    }\r\n  }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = '';\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  private _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._adapter.today());\r\n\r\n    let firstOfMonth = this._adapter.createDatetime(\r\n      this._adapter.getYear(this.activeDate),\r\n      this._adapter.getMonth(this.activeDate),\r\n      1,\r\n      this._adapter.getHour(this.activeDate),\r\n      this._adapter.getMinute(this.activeDate)\r\n    );\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK +\r\n        this._adapter.getDayOfWeek(firstOfMonth) -\r\n        this._adapter.getFirstDayOfWeek()) %\r\n      DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n  }\r\n\r\n  /** Creates MdCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    let daysInMonth = this._adapter.getNumDaysInMonth(this.activeDate);\r\n    let dateNames = this._adapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (\r\n      let i = 0, cell = this._firstWeekOffset;\r\n      i < daysInMonth;\r\n      i++, cell++\r\n    ) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      let date = this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        this._adapter.getMonth(this.activeDate),\r\n        i + 1,\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate)\r\n      );\r\n      let enabled = !this.dateFilter || this.dateFilter(date);\r\n      let ariaLabel = this._adapter.format(\r\n        date,\r\n        this._dateFormats.display.dateA11yLabel\r\n      );\r\n      this._weeks[this._weeks.length - 1].push(\r\n        new MatDatetimepickerCalendarCell(\r\n          i + 1,\r\n          dateNames[i],\r\n          ariaLabel,\r\n          enabled\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D): number {\r\n    return this._adapter.sameMonthAndYear(date, this.activeDate)\r\n      ? this._adapter.getDate(date)\r\n      : null;\r\n  }\r\n\r\n  private calendarState(direction: string): void {\r\n    this._calendarState = direction;\r\n  }\r\n}\r\n","<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\">\r\n    <tr>\r\n      <th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">\r\n        {{day.narrow}}\r\n      </th>\r\n    </tr>\r\n  </thead>\r\n  <tbody\r\n    (@slideCalendar.done)=\"_calendarStateDone()\"\r\n    (selectedValueChange)=\"_dateSelected($event)\"\r\n    [@slideCalendar]=\"_calendarState\"\r\n    [activeCell]=\"_adapter.getDate(activeDate) - 1\"\r\n    [rows]=\"_weeks\"\r\n    [selectedValue]=\"_selectedDate\"\r\n    [todayValue]=\"_todayDate\"\r\n    matDatetimepickerCalendarBody\r\n    role=\"grid\"\r\n  ></tbody>\r\n</table>\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { createMissingDateImplError } from './datetimepicker-errors';\r\nimport { MatDatetimepickerCalendarCell } from './calendar-body';\r\nimport { slideCalendar } from './datetimepicker-animations';\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats,\r\n} from '../adapter/datetime-formats';\r\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\r\nimport { MatDatetimepickerType } from './datetimepicker-type';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'mat-datetimepicker-year-view',\r\n  templateUrl: 'year-view.html',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatetimepickerYearViewComponent<D> implements AfterContentInit {\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n\r\n  @Input() type: MatDatetimepickerType = 'date';\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n  /** Emits when a new month is selected. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatDatetimepickerCalendarCell[][];\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number;\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number;\r\n  _calendarState: string;\r\n\r\n  constructor(\r\n    @Optional() public _adapter: DatetimeAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATETIME_FORMATS)\r\n    private _dateFormats: MatDatetimeFormats\r\n  ) {\r\n    if (!this._adapter) {\r\n      throw createMissingDateImplError('DatetimeAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATETIME_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._adapter.today();\r\n  }\r\n\r\n  private _activeDate: D;\r\n\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = value || this._adapter.today();\r\n    if (\r\n      oldActiveDate &&\r\n      this._activeDate &&\r\n      !this._adapter.sameYear(oldActiveDate, this._activeDate)\r\n    ) {\r\n      this._init();\r\n      // if (oldActiveDate < this._activeDate) {\r\n      //  this.calendarState('right');\r\n      // } else {\r\n      //  this.calendarState('left');\r\n      // }\r\n    }\r\n  }\r\n\r\n  private _selected: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D) {\r\n    this._selected = value;\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const normalizedDate = this._adapter.createDatetime(\r\n      this._adapter.getYear(this.activeDate),\r\n      month,\r\n      1,\r\n      0,\r\n      0\r\n    );\r\n\r\n    this.selectedChange.emit(\r\n      this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        month,\r\n        Math.min(\r\n          this._adapter.getDate(this.activeDate),\r\n          this._adapter.getNumDaysInMonth(normalizedDate)\r\n        ),\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate)\r\n      )\r\n    );\r\n    if (this.type === 'month') {\r\n      this._userSelection.emit();\r\n    }\r\n  }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = '';\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  private _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._adapter.today());\r\n    this._yearLabel = this._adapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._adapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [\r\n      [0, 1, 2, 3, 4],\r\n      [5, 6, 7, 8, 9, 10, 11],\r\n    ].map((row) =>\r\n      row.map((month) => this._createCellForMonth(month, monthNames[month]))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D) {\r\n    return this._adapter.sameYear(date, this.activeDate)\r\n      ? this._adapter.getMonth(date)\r\n      : null;\r\n  }\r\n\r\n  /** Creates an MdCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._adapter.format(\r\n      this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        month,\r\n        1,\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate)\r\n      ),\r\n      this._dateFormats.display.monthYearA11yLabel\r\n    );\r\n    return new MatDatetimepickerCalendarCell(\r\n      month,\r\n      monthName.toLocaleUpperCase(),\r\n      ariaLabel,\r\n      this._isMonthEnabled(month)\r\n    );\r\n  }\r\n\r\n  // private calendarState(direction: string): void {\r\n  //   this._calendarState = direction;\r\n  // }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _isMonthEnabled(month: number) {\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    let firstOfMonth = this._adapter.createDatetime(\r\n      this._adapter.getYear(this.activeDate),\r\n      month,\r\n      1,\r\n      this._adapter.getHour(this.activeDate),\r\n      this._adapter.getMinute(this.activeDate)\r\n    );\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (\r\n      let date = firstOfMonth;\r\n      this._adapter.getMonth(date) == month;\r\n      date = this._adapter.addCalendarDays(date, 1)\r\n    ) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\"></thead>\r\n  <tbody\r\n    (@slideCalendar.done)=\"_calendarStateDone()\"\r\n    (selectedValueChange)=\"_monthSelected($event)\"\r\n    [@slideCalendar]=\"_calendarState\"\r\n    [activeCell]=\"_adapter.getMonth(activeDate)\"\r\n    [labelMinRequiredCells]=\"2\"\r\n    [label]=\"_yearLabel\"\r\n    [rows]=\"_months\"\r\n    [selectedValue]=\"_selectedMonth\"\r\n    [todayValue]=\"_todayMonth\"\r\n    allowDisabledSelection=\"true\"\r\n    matDatetimepickerCalendarBody\r\n    role=\"grid\"\r\n  ></tbody>\r\n</table>\r\n","import {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { MatDatepickerIntl } from '@angular/material/datepicker';\nimport { Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\nimport {\n  MAT_DATETIME_FORMATS,\n  MatDatetimeFormats,\n} from '../adapter/datetime-formats';\nimport { MatClockView } from './clock';\nimport { slideCalendar } from './datetimepicker-animations';\nimport { createMissingDateImplError } from './datetimepicker-errors';\nimport { MatDatetimepickerFilterType } from './datetimepicker-filtertype';\nimport { MatDatetimepickerType } from './datetimepicker-type';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  yearsPerPage,\n  yearsPerRow,\n} from './multi-year-view';\n\nexport type MatCalendarView = 'clock' | 'month' | 'year' | 'multi-year';\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-datetimepicker-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.scss'],\n  host: {\n    '[class.mat-datetimepicker-calendar]': 'true',\n    '[attr.aria-label]': 'ariaLabel',\n    role: 'dialog',\n    tabindex: '0',\n    '(keydown)': '_handleCalendarBodyKeydown($event)',\n  },\n  animations: [slideCalendar],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatetimepickerCalendarComponent<D>\n  implements AfterContentInit, OnDestroy\n{\n  @Output() closeDateTimePicker = new EventEmitter<any>();\n  /** Active multi year view when click on year. */\n  @Input() multiYearSelector: boolean = false;\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n  @Input() twelvehour: boolean = false;\n  @Input() timeInterval: number = 1;\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D, type: MatDatetimepickerFilterType) => boolean;\n  @Input() ariaLabel = 'Use arrow keys to navigate';\n  @Input() ariaNextMonthLabel = 'Next month';\n  @Input() ariaPrevMonthLabel = 'Previous month';\n  @Input() ariaNextYearLabel = 'Next year';\n  @Input() ariaPrevYearLabel = 'Previous year';\n  @Input() ariaNextMultiYearLabel = 'Next year range';\n  @Input() ariaPrevMultiYearLabel = 'Previous year range';\n  @Input() confirmLabel: string = 'Ok';\n  @Input() cancelLabel: string = 'Cancel';\n  /** Prevent user to select same date time */\n  @Input() preventSameDateTimeSelection = false;\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange: EventEmitter<D> = new EventEmitter<D>();\n  /** Emits when the view has been changed. **/\n  @Output() viewChanged: EventEmitter<MatCalendarView> =\n    new EventEmitter<MatCalendarView>();\n  _AMPM: string;\n  _clockView: MatClockView = 'hour';\n  _calendarState: string;\n  private _intlChanges: Subscription;\n  private _clampedActiveDate: D;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _intl: MatDatepickerIntl,\n    private _ngZone: NgZone,\n    @Optional() private _adapter: DatetimeAdapter<D>,\n    @Optional()\n    @Inject(MAT_DATETIME_FORMATS)\n    private _dateFormats: MatDatetimeFormats,\n    changeDetectorRef: ChangeDetectorRef\n  ) {\n    if (!this._adapter) {\n      throw createMissingDateImplError('DatetimeAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATETIME_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() =>\n      changeDetectorRef.markForCheck()\n    );\n  }\n\n  private _type: MatDatetimepickerType = 'date';\n\n  @Input()\n  get type(): MatDatetimepickerType {\n    return this._type;\n  }\n\n  set type(value: MatDatetimepickerType) {\n    this._type = value || 'date';\n    if (this.type === 'year') {\n      this.multiYearSelector = true;\n    }\n  }\n\n  private _startAt: D | null;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null {\n    return this._startAt;\n  }\n\n  set startAt(value: D | null) {\n    this._startAt = this._adapter.getValidDateOrNull(value);\n  }\n\n  private _selected: D | null;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null {\n    return this._selected;\n  }\n\n  set selected(value: D | null) {\n    this._selected = this._adapter.getValidDateOrNull(value);\n  }\n\n  private _minDate: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n\n  set minDate(value: D | null) {\n    this._minDate = this._adapter.getValidDateOrNull(value);\n  }\n\n  private _maxDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n\n  set maxDate(value: D | null) {\n    this._maxDate = this._adapter.getValidDateOrNull(value);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D {\n    return this._clampedActiveDate;\n  }\n\n  set _activeDate(value: D) {\n    const oldActiveDate = this._clampedActiveDate;\n    this._clampedActiveDate = this._adapter.clampDate(\n      value,\n      this.minDate,\n      this.maxDate\n    );\n    if (\n      oldActiveDate &&\n      this._clampedActiveDate &&\n      this.currentView === 'month' &&\n      !this._adapter.sameMonthAndYear(oldActiveDate, this._clampedActiveDate)\n    ) {\n      if (this._adapter.isInNextMonth(oldActiveDate, this._clampedActiveDate)) {\n        this.calendarState('right');\n      } else {\n        this.calendarState('left');\n      }\n    }\n  }\n\n  /** Whether the calendar is in month view. */\n  _currentView: MatCalendarView;\n\n  get currentView(): MatCalendarView {\n    return this._currentView;\n  }\n\n  set currentView(view: MatCalendarView) {\n    this._currentView = view;\n    this.viewChanged.emit(view);\n  }\n\n  /** The label for the current calendar view. */\n  get _yearLabel(): string {\n    return this._adapter.getYearName(this._activeDate);\n  }\n\n  get _monthYearLabel(): string {\n    if (this.currentView === 'multi-year') {\n      // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view, and the last year is\n      // just yearsPerPage - 1 away.\n      const activeYear = this._adapter.getYear(this._activeDate);\n      const minYearOfPage =\n        activeYear -\n        getActiveOffset(\n          this._adapter,\n          this._activeDate,\n          this.minDate,\n          this.maxDate\n        );\n      const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n      const minYearName = this._adapter.getYearName(\n        this._adapter.createDate(minYearOfPage, 0, 1)\n      );\n      const maxYearName = this._adapter.getYearName(\n        this._adapter.createDate(maxYearOfPage, 0, 1)\n      );\n      return this._intl.formatYearRange(minYearName, maxYearName);\n    }\n\n    return this.currentView === 'month'\n      ? this._adapter.getMonthNames('long')[\n          this._adapter.getMonth(this._activeDate)\n        ]\n      : this._adapter.getYearName(this._activeDate);\n  }\n\n  get _dateLabel(): string {\n    switch (this.type) {\n      case 'month':\n        return this._adapter.getMonthNames('long')[\n          this._adapter.getMonth(this._activeDate)\n        ];\n      default:\n        return this._adapter.format(\n          this._activeDate,\n          this._dateFormats.display.popupHeaderDateLabel\n        );\n    }\n  }\n\n  get _hoursLabel(): string {\n    let hour = this._adapter.getHour(this._activeDate);\n    if (this.twelvehour) {\n      if (hour === 0) {\n        hour = 24;\n      }\n      hour = hour > 12 ? hour - 12 : hour;\n    }\n    return this._2digit(hour);\n  }\n\n  get _minutesLabel(): string {\n    return this._2digit(this._adapter.getMinute(this._activeDate));\n  }\n\n  get _ariaLabelNext(): string {\n    switch (this._currentView) {\n      case 'month':\n        return this.ariaNextMonthLabel;\n      case 'year':\n        return this.ariaNextYearLabel;\n      case 'multi-year':\n        return this.ariaNextMultiYearLabel;\n      default:\n        return '';\n    }\n  }\n\n  get _ariaLabelPrev(): string {\n    switch (this._currentView) {\n      case 'month':\n        return this.ariaPrevMonthLabel;\n      case 'year':\n        return this.ariaPrevYearLabel;\n      case 'multi-year':\n        return this.ariaPrevMultiYearLabel;\n      default:\n        return '';\n    }\n  }\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D) => {\n    return (\n      !!date &&\n      (!this.dateFilter ||\n        this.dateFilter(date, MatDatetimepickerFilterType.DATE)) &&\n      (!this.minDate || this._adapter.compareDate(date, this.minDate) >= 0) &&\n      (!this.maxDate || this._adapter.compareDate(date, this.maxDate) <= 0)\n    );\n  };\n\n  onCancel(): void {\n    this.closeDateTimePicker.emit(null);\n  }\n\n  onConfirm(): void {\n    this.closeDateTimePicker.emit(this._activeDate);\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._adapter.today();\n    this._selectAMPM(this._activeDate);\n    this._focusActiveCell();\n    if (this.type === 'year') {\n      this.currentView = 'multi-year';\n    } else if (this.type === 'month') {\n      this.currentView = 'year';\n    } else if (this.type === 'time') {\n      this.currentView = 'clock';\n    } else {\n      this.currentView = this.startView || 'month';\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (this.type === 'date') {\n      if (\n        !this._adapter.sameDate(date, this.selected) ||\n        !this.preventSameDateTimeSelection\n      ) {\n        this.selectedChange.emit(date);\n      }\n    } else {\n      this._activeDate = date;\n      this.currentView = 'clock';\n    }\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    if (this.type === 'month') {\n      if (\n        !this._adapter.sameMonthAndYear(month, this.selected) ||\n        !this.preventSameDateTimeSelection\n      ) {\n        this.selectedChange.emit(this._adapter.getFirstDateOfMonth(month));\n      }\n    } else {\n      this._activeDate = month;\n      this.currentView = 'month';\n      this._clockView = 'hour';\n    }\n  }\n\n  /** Handles year selection in the multi year view. */\n  _yearSelected(year: D): void {\n    if (this.type === 'year') {\n      if (\n        !this._adapter.sameYear(year, this.selected) ||\n        !this.preventSameDateTimeSelection\n      ) {\n        const normalizedDate = this._adapter.createDatetime(\n          this._adapter.getYear(year),\n          0,\n          1,\n          0,\n          0\n        );\n        this.selectedChange.emit(normalizedDate);\n      }\n    } else {\n      this._activeDate = year;\n      this.currentView = 'year';\n    }\n  }\n\n  _timeSelected(date: D): void {\n    if (this._clockView !== 'minute') {\n      this._activeDate = this._updateDate(date);\n      this._clockView = 'minute';\n    } else {\n      if (\n        !this._adapter.sameDatetime(date, this.selected) ||\n        !this.preventSameDateTimeSelection\n      ) {\n        this.selectedChange.emit(date);\n      }\n    }\n  }\n\n  _onActiveDateChange(date: D) {\n    this._activeDate = date;\n  }\n\n  _updateDate(date: D): D {\n    if (this.twelvehour) {\n      const HOUR = this._adapter.getHour(date);\n      if (HOUR === 12) {\n        if (this._AMPM === 'AM') {\n          return this._adapter.addCalendarHours(date, -12);\n        }\n      } else if (this._AMPM === 'PM') {\n        return this._adapter.addCalendarHours(date, 12);\n      }\n    }\n    return date;\n  }\n\n  _selectAMPM(date: D) {\n    if (this._adapter.getHour(date) > 11) {\n      this._AMPM = 'PM';\n    } else {\n      this._AMPM = 'AM';\n    }\n  }\n\n  _ampmClicked(source: string): void {\n    if (source === this._AMPM) {\n      return;\n    }\n    this._AMPM = source;\n    if (this._AMPM === 'AM') {\n      this._activeDate = this._adapter.addCalendarHours(this._activeDate, -12);\n    } else {\n      this._activeDate = this._adapter.addCalendarHours(this._activeDate, 12);\n    }\n  }\n\n  _yearClicked(): void {\n    if (this.type === 'year' || this.multiYearSelector) {\n      this.currentView = 'multi-year';\n      return;\n    }\n    this.currentView = 'year';\n  }\n\n  _dateClicked(): void {\n    if (this.type !== 'month') {\n      this.currentView = 'month';\n    }\n  }\n\n  _hoursClicked(): void {\n    this.currentView = 'clock';\n    this._clockView = 'hour';\n  }\n\n  _minutesClicked(): void {\n    this.currentView = 'clock';\n    this._clockView = 'minute';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate =\n      this.currentView === 'month'\n        ? this._adapter.addCalendarMonths(this._activeDate, -1)\n        : this._adapter.addCalendarYears(\n            this._activeDate,\n            this.currentView === 'year' ? -1 : -yearsPerPage\n          );\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate =\n      this.currentView === 'month'\n        ? this._adapter.addCalendarMonths(this._activeDate, 1)\n        : this._adapter.addCalendarYears(\n            this._activeDate,\n            this.currentView === 'year' ? 1 : yearsPerPage\n          );\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this.currentView === 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this.currentView === 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else if (this.currentView === 'multi-year') {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInClockView(event);\n    }\n  }\n\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable\n        .asObservable()\n        .pipe(first())\n        .subscribe(() => {\n          this._elementRef.nativeElement.focus();\n        });\n    });\n  }\n\n  _calendarStateDone() {\n    this._calendarState = '';\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.currentView === 'month') {\n      return (\n        this._adapter.getYear(date1) === this._adapter.getYear(date2) &&\n        this._adapter.getMonth(date1) === this._adapter.getMonth(date2)\n      );\n    }\n    if (this.currentView === 'year') {\n      return this._adapter.getYear(date1) === this._adapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._adapter,\n      date1,\n      date2,\n      this.minDate,\n      this.maxDate\n    );\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._adapter.addCalendarDays(\n          this._activeDate,\n          1 - this._adapter.getDate(this._activeDate)\n        );\n        break;\n      case END:\n        this._activeDate = this._adapter.addCalendarDays(\n          this._activeDate,\n          this._adapter.getNumDaysInMonth(this._activeDate) -\n            this._adapter.getDate(this._activeDate)\n        );\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey\n          ? this._adapter.addCalendarYears(this._activeDate, -1)\n          : this._adapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey\n          ? this._adapter.addCalendarYears(this._activeDate, 1)\n          : this._adapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._adapter.addCalendarMonths(\n          this._activeDate,\n          -1\n        );\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._adapter.addCalendarMonths(\n          this._activeDate,\n          -this._adapter.getMonth(this._activeDate)\n        );\n        break;\n      case END:\n        this._activeDate = this._adapter.addCalendarMonths(\n          this._activeDate,\n          11 - this._adapter.getMonth(this._activeDate)\n        );\n        break;\n      case PAGE_UP:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? -10 : -1\n        );\n        break;\n      case PAGE_DOWN:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? 10 : 1\n        );\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(\n    event: KeyboardEvent\n  ): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._adapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._adapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          -yearsPerRow\n        );\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          yearsPerRow\n        );\n        break;\n      case HOME:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          -getActiveOffset(\n            this._adapter,\n            this._activeDate,\n            this.minDate,\n            this.maxDate\n          )\n        );\n        break;\n      case END:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          yearsPerPage -\n            getActiveOffset(\n              this._adapter,\n              this._activeDate,\n              this.minDate,\n              this.maxDate\n            ) -\n            1\n        );\n        break;\n      case PAGE_UP:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? -yearsPerPage * 10 : -yearsPerPage\n        );\n        break;\n      case PAGE_DOWN:\n        this._activeDate = this._adapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? yearsPerPage * 10 : yearsPerPage\n        );\n        break;\n      case ENTER:\n        this._yearSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInClockView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case UP_ARROW:\n        this._activeDate =\n          this._clockView === 'hour'\n            ? this._adapter.addCalendarHours(this._activeDate, 1)\n            : this._adapter.addCalendarMinutes(this._activeDate, 1);\n        break;\n      case DOWN_ARROW:\n        this._activeDate =\n          this._clockView === 'hour'\n            ? this._adapter.addCalendarHours(this._activeDate, -1)\n            : this._adapter.addCalendarMinutes(this._activeDate, -1);\n        break;\n      case ENTER:\n        this._timeSelected(this._activeDate);\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * Determine the date for the month that comes before the given month in the same column in the\n   * calendar table.\n   */\n  private _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    const increment =\n      this._adapter.getMonth(date) <= 4\n        ? -5\n        : this._adapter.getMonth(date) >= 7\n        ? -7\n        : -12;\n    return this._adapter.addCalendarMonths(date, increment);\n  }\n\n  /**\n   * Determine the date for the month that comes after the given month in the same column in the\n   * calendar table.\n   */\n  private _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    const increment =\n      this._adapter.getMonth(date) <= 4\n        ? 7\n        : this._adapter.getMonth(date) >= 7\n        ? 5\n        : 12;\n    return this._adapter.addCalendarMonths(date, increment);\n  }\n\n  private calendarState(direction: string): void {\n    this._calendarState = direction;\n  }\n\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n}\n","<div class=\"mat-datetimepicker-calendar-header\">\n  <div\n    (click)=\"_yearClicked()\"\n    *ngIf=\"type !== 'time'\"\n    [class.active]=\"currentView === 'year' || currentView === 'multi-year'\"\n    class=\"mat-datetimepicker-calendar-header-year\"\n    role=\"button\"\n  >\n    {{ _yearLabel }}\n    <mat-icon *ngIf=\"multiYearSelector || type === 'year'\"\n      >arrow_drop_down</mat-icon\n    >\n  </div>\n  <div class=\"mat-datetimepicker-calendar-header-date-time\">\n    <span\n      (click)=\"_dateClicked()\"\n      *ngIf=\"type !== 'time' && type !== 'year'\"\n      [class.active]=\"currentView === 'month'\"\n      [class.not-clickable]=\"type === 'month'\"\n      class=\"mat-datetimepicker-calendar-header-date\"\n      role=\"button\"\n      >{{ _dateLabel }}</span\n    >\n    <span\n      *ngIf=\"type.endsWith('time')\"\n      [class.active]=\"currentView === 'clock'\"\n      class=\"mat-datetimepicker-calendar-header-time\"\n    >\n      <span\n        (click)=\"_hoursClicked()\"\n        [class.active]=\"_clockView === 'hour'\"\n        class=\"mat-datetimepicker-calendar-header-hours\"\n        role=\"button\"\n        >{{ _hoursLabel }}</span\n      >:<span\n        (click)=\"_minutesClicked()\"\n        [class.active]=\"_clockView === 'minute'\"\n        class=\"mat-datetimepicker-calendar-header-minutes\"\n        role=\"button\"\n        >{{ _minutesLabel }}</span\n      >\n      <br />\n      <span\n        *ngIf=\"twelvehour\"\n        class=\"mat-datetimepicker-calendar-header-ampm-container\"\n      >\n        <span\n          (click)=\"_ampmClicked('AM')\"\n          [class.active]=\"_AMPM === 'AM'\"\n          class=\"mat-datetimepicker-calendar-header-ampm\"\n          >AM</span\n        >/<span\n          (click)=\"_ampmClicked('PM')\"\n          [class.active]=\"_AMPM === 'PM'\"\n          class=\"mat-datetimepicker-calendar-header-ampm\"\n          >PM</span\n        >\n      </span>\n    </span>\n  </div>\n</div>\n<div [ngSwitch]=\"currentView\" class=\"mat-datetimepicker-calendar-content\">\n  <div\n    *ngIf=\"currentView === 'month' || currentView === 'year' || currentView === 'multi-year'\"\n    class=\"mat-month-content\"\n  >\n    <div class=\"mat-datetimepicker-calendar-controls\">\n      <div\n        (click)=\"_previousClicked()\"\n        [attr.aria-disabled]=\"!_previousEnabled()\"\n        [attr.aria-label]=\"_ariaLabelPrev\"\n        [class.disabled]=\"!_previousEnabled()\"\n        class=\"mat-datetimepicker-calendar-previous-button\"\n        role=\"button\"\n      >\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\n        </svg>\n      </div>\n      <div\n        (@slideCalendar.done)=\"_calendarStateDone()\"\n        [@slideCalendar]=\"_calendarState\"\n        class=\"mat-datetimepicker-calendar-period-button\"\n      >\n        <strong>{{ _monthYearLabel }}</strong>\n      </div>\n      <div\n        (click)=\"_nextClicked()\"\n        [attr.aria-disabled]=\"!_nextEnabled()\"\n        [attr.aria-label]=\"_ariaLabelNext\"\n        [class.disabled]=\"!_nextEnabled()\"\n        class=\"mat-datetimepicker-calendar-next-button\"\n        role=\"button\"\n      >\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\n        </svg>\n      </div>\n    </div>\n  </div>\n  <mat-datetimepicker-month-view\n    (_userSelection)=\"onCancel()\"\n    (selectedChange)=\"_dateSelected($event)\"\n    *ngSwitchCase=\"'month'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-month-view>\n  <mat-datetimepicker-year-view\n    (_userSelection)=\"onCancel()\"\n    (selectedChange)=\"_monthSelected($event)\"\n    *ngSwitchCase=\"'year'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-year-view>\n  <mat-datetimepicker-multi-year-view\n    (_userSelection)=\"onCancel()\"\n    (selectedChange)=\"_yearSelected($event)\"\n    *ngSwitchCase=\"'multi-year'\"\n    [activeDate]=\"_activeDate\"\n    [dateFilter]=\"_dateFilterForViews\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    [selected]=\"selected\"\n    [type]=\"type\"\n  >\n  </mat-datetimepicker-multi-year-view>\n  <mat-datetimepicker-clock\n    (_userSelection)=\"onCancel()\"\n    (activeDateChange)=\"_onActiveDateChange($event)\"\n    (selectedChange)=\"_timeSelected($event)\"\n    *ngSwitchDefault\n    [dateFilter]=\"dateFilter\"\n    [interval]=\"timeInterval\"\n    [maxDate]=\"maxDate\"\n    [minDate]=\"minDate\"\n    [selected]=\"_activeDate\"\n    [startView]=\"_clockView\"\n    [twelvehour]=\"twelvehour\"\n  >\n  </mat-datetimepicker-clock>\n  <div class=\"action-buttons\">\n    <button class=\"cancel-button\" mat-raised-button (click)=\"onCancel()\">\n      {{cancelLabel}}</button\n    ><button\n      class=\"confirm-button\"\n      mat-raised-button\n      color=\"primary\"\n      (click)=\"onConfirm()\"\n    >\n      {{confirmLabel}}\n    </button>\n  </div>\n</div>\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { MAT_DATEPICKER_SCROLL_STRATEGY } from '@angular/material/datepicker';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\nimport {\n  MatCalendarView,\n  MatDatetimepickerCalendarComponent,\n} from './calendar';\nimport { createMissingDateImplError } from './datetimepicker-errors';\nimport { MatDatetimepickerFilterType } from './datetimepicker-filtertype';\nimport { MatDatetimepickerInputDirective } from './datetimepicker-input';\nimport { MatDatetimepickerType } from './datetimepicker-type';\n\nexport type MatDatetimepickerMode = 'auto' | 'portrait' | 'landscape';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datetimepickerUid = 0;\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  selector: 'mat-datetimepicker-content',\n  templateUrl: 'datetimepicker-content.html',\n  styleUrls: ['datetimepicker-content.scss'],\n  host: {\n    class: 'mat-datetimepicker-content',\n    '[class.mat-datetimepicker-content-touch]': 'datetimepicker?.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatetimepickerContentComponent<D> implements AfterContentInit {\n  datetimepicker: MatDatetimepickerComponent<D>;\n\n  @ViewChild(MatDatetimepickerCalendarComponent, { static: true })\n  _calendar: MatDatetimepickerCalendarComponent<D>;\n\n  changedDate: D = null;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n\n  onSelectionChange(date: D) {\n    this.changedDate = date;\n  }\n\n  onSelectionConfirm(date: D) {\n    this.datetimepicker._select(date);\n  }\n\n  handleClose(val: any) {\n    let newValue = this.changedDate ?? val;\n    if ((val && this.changedDate) || val) {\n      this.onSelectionConfirm(newValue);\n      this.datetimepicker.close();\n      this.changedDate = null;\n    } else if (val === null)\n      this.datetimepicker.close();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datetimepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n@Component({\n  selector: 'mat-datetimepicker',\n  exportAs: 'matDatetimepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatetimepickerComponent<D> implements OnDestroy {\n  /** Active multi year view when click on year. */\n  @Input() multiYearSelector: boolean = false;\n  /** if true change the clock to 12 hour format. */\n  @Input() twelvehour: boolean = false;\n  /** The view that the calendar should start in. */\n  @Input() startView: MatCalendarView = 'month';\n  @Input() mode: MatDatetimepickerMode = 'auto';\n  @Input() timeInterval: number = 1;\n  @Input() ariaNextMonthLabel = 'Next month';\n  @Input() ariaPrevMonthLabel = 'Previous month';\n  @Input() ariaNextYearLabel = 'Next year';\n  @Input() ariaPrevYearLabel = 'Previous year';\n  @Input() confirmLabel: string = 'Ok';\n  @Input() cancelLabel: string = 'Cancel';\n  /** Prevent user to select same date time */\n  @Input() preventSameDateTimeSelection = false;\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n  /** Emits when the datepicker has been opened. */\n  // eslint-disable-next-line @angular-eslint/no-output-rename\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n  /** Emits when the datepicker has been closed. */\n  // eslint-disable-next-line @angular-eslint/no-output-rename\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n  /** Emits when the view has been changed. **/\n  @Output() viewChanged: EventEmitter<MatCalendarView> =\n    new EventEmitter<MatCalendarView>();\n  /** Whether the calendar is open. */\n  opened = false;\n  /** The id for the datepicker calendar. */\n  id = `mat-datetimepicker-${datetimepickerUid++}`;\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatetimepickerInputDirective<D>;\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n  private _validSelected: D | null = null;\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<\n    MatDatetimepickerContentComponent<D>\n  >;\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n  private _inputSubscription = Subscription.EMPTY;\n\n  constructor(\n    private _dialog: MatDialog,\n    private _overlay: Overlay,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dateAdapter: DatetimeAdapter<D>,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(DOCUMENT) private _document: any\n  ) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  private _startAt: D | null;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return (\n      this._startAt ||\n      (this._datepickerInput ? this._datepickerInput.value : null)\n    );\n  }\n\n  set startAt(date: D | null) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(date);\n  }\n\n  private _openOnFocus: boolean;\n\n  @Input()\n  get openOnFocus(): boolean {\n    return this._openOnFocus;\n  }\n\n  set openOnFocus(value: boolean) {\n    this._openOnFocus = coerceBooleanProperty(value);\n  }\n\n  private _type: MatDatetimepickerType = 'date';\n\n  @Input()\n  get type() {\n    return this._type;\n  }\n\n  set type(value: MatDatetimepickerType) {\n    this._type = value || 'date';\n  }\n\n  private _touchUi = false;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n\n  private _disabled: boolean;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput\n      ? this._datepickerInput.disabled\n      : !!this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n\n  /** The currently selected date. */\n  get _selected(): D | null {\n    return this._validSelected;\n  }\n\n  set _selected(value: D | null) {\n    this._validSelected = value;\n  }\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (\n    date: D | null,\n    type: MatDatetimepickerFilterType\n  ) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  _handleFocus() {\n    if (!this.opened && this.openOnFocus) {\n      this.open();\n    }\n  }\n\n  _viewChanged(type: MatCalendarView): void {\n    this.viewChanged.emit(type);\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    const oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDatetime(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatetimepickerInputDirective<D>): void {\n    if (this._datepickerInput) {\n      throw Error(\n        'A MatDatepicker can only be associated with a single input.'\n      );\n    }\n    this._datepickerInput = input;\n    this._inputSubscription = this._datepickerInput._valueChange.subscribe(\n      (value: D | null) => (this._selected = value)\n    );\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error(\n        'Attempted to open an MatDatepicker with no associated input.'\n      );\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this.opened) {\n        this.opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (\n      this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function'\n    ) {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatetimepickerContentComponent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datetimepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datetimepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<\n        MatDatetimepickerContentComponent<D>\n      >(MatDatetimepickerContentComponent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      const componentRef: ComponentRef<MatDatetimepickerContentComponent<D>> =\n        this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datetimepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable\n        .asObservable()\n        .pipe(first())\n        .subscribe(() => {\n          this._popupRef.updatePosition();\n        });\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datetimepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay\n      .position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datetimepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top',\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top',\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom',\n        },\n      ]);\n  }\n}\n","<mat-datetimepicker-calendar\n  (closeDateTimePicker)=\"handleClose($event)\"\n  (selectedChange)=\"onSelectionChange($event)\"\n  (viewChanged)=\"datetimepicker._viewChanged($event)\"\n  [ariaNextMonthLabel]=\"datetimepicker.ariaNextMonthLabel\"\n  [ariaNextYearLabel]=\"datetimepicker.ariaNextYearLabel\"\n  [ariaPrevMonthLabel]=\"datetimepicker.ariaPrevMonthLabel\"\n  [ariaPrevYearLabel]=\"datetimepicker.ariaPrevYearLabel\"\n  [preventSameDateTimeSelection]=\"datetimepicker.preventSameDateTimeSelection\"\n  [attr.mode]=\"datetimepicker.mode\"\n  [dateFilter]=\"datetimepicker._dateFilter\"\n  [id]=\"datetimepicker.id\"\n  [maxDate]=\"datetimepicker._maxDate\"\n  [minDate]=\"datetimepicker._minDate\"\n  [multiYearSelector]=\"datetimepicker.multiYearSelector\"\n  [selected]=\"datetimepicker._selected\"\n  [startAt]=\"datetimepicker.startAt\"\n  [startView]=\"datetimepicker.startView\"\n  [timeInterval]=\"datetimepicker.timeInterval\"\n  [twelvehour]=\"datetimepicker.twelvehour\"\n  [type]=\"datetimepicker.type\"\n  [cancelLabel]=\"datetimepicker.cancelLabel\"\n  [confirmLabel]=\"datetimepicker.confirmLabel\"\n  cdkTrapFocus\n  class=\"mat-typography\"\n>\n</mat-datetimepicker-calendar>\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { Subscription } from 'rxjs';\r\nimport { DatetimeAdapter } from '../adapter/datetime-adapter';\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats,\r\n} from '../adapter/datetime-formats';\r\nimport { MatDatetimepickerComponent } from './datetimepicker';\r\nimport { createMissingDateImplError } from './datetimepicker-errors';\r\nimport { MatDatetimepickerFilterType } from './datetimepicker-filtertype';\r\n\r\n// eslint-disable  @typescript-eslint/no-use-before-define\r\n\r\nexport const MAT_DATETIMEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatetimepickerInputDirective),\r\n  multi: true,\r\n};\r\n\r\nexport const MAT_DATETIMEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatetimepickerInputDirective),\r\n  multi: true,\r\n};\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatetimepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    public target: MatDatetimepickerInputDirective<D>,\r\n    public targetElement: HTMLElement\r\n  ) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[matDatetimepicker]',\r\n  providers: [\r\n    MAT_DATETIMEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATETIMEPICKER_VALIDATORS,\r\n    {\r\n      provide: MAT_INPUT_VALUE_ACCESSOR,\r\n      useExisting: MatDatetimepickerInputDirective,\r\n    },\r\n  ],\r\n  host: {\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    '[disabled]': 'disabled',\r\n    '(focus)': '_datepicker._handleFocus()',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onBlur()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'matDatepickerInput',\r\n})\r\nexport class MatDatetimepickerInputDirective<D>\r\n  implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator\r\n{\r\n  _datepicker: MatDatetimepickerComponent<D>;\r\n  _dateFilter: (date: D | null, type: MatDatetimepickerFilterType) => boolean;\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() dateChange = new EventEmitter<MatDatetimepickerInputEvent<D>>();\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() dateInput = new EventEmitter<MatDatetimepickerInputEvent<D>>();\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n  private _localeSubscription = Subscription.EMPTY;\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    @Optional() public _dateAdapter: DatetimeAdapter<D>,\r\n    @Optional()\r\n    @Inject(MAT_DATETIME_FORMATS)\r\n    private _dateFormats: MatDatetimeFormats,\r\n    @Optional() private _formField: MatFormField\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('DatetimeAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('MAT_DATETIME_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\r\n\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatetimepicker(value: MatDatetimepickerComponent<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n\r\n  @Input() set matDatepickerFilter(\r\n    filter: (date: D | null, type: MatDatetimepickerFilterType) => boolean\r\n  ) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n\r\n  private _value: D | null;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._dateAdapter.getValidDateOrNull(value);\r\n    const oldDate = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    // use timeout to ensure the datetimepicker is instantiated and we get the correct format\r\n    setTimeout(() => {\r\n      if (!this._dateAdapter.sameDatetime(oldDate, value)) {\r\n        this._valueChange.emit(value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _min: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null {\r\n    return this._min;\r\n  }\r\n\r\n  set min(value: D | null) {\r\n    this._min = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(value)\r\n    );\r\n    this._validatorOnChange();\r\n  }\r\n\r\n  private _max: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null {\r\n    return this._max;\r\n  }\r\n\r\n  set max(value: D | null) {\r\n    this._max = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(value)\r\n    );\r\n    this._validatorOnChange();\r\n  }\r\n\r\n  private _disabled: boolean;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled() {\r\n    return !!this._disabled;\r\n  }\r\n\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n  }\r\n\r\n  _onTouched = () => {};\r\n\r\n  ngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription = this._datepicker.selectedChanged.subscribe(\r\n        (selected: D) => {\r\n          this.value = selected;\r\n          this._cvaOnChange(selected);\r\n          this._onTouched();\r\n          this.dateInput.emit(\r\n            new MatDatetimepickerInputEvent(\r\n              this,\r\n              this._elementRef.nativeElement\r\n            )\r\n          );\r\n          this.dateChange.emit(\r\n            new MatDatetimepickerInputEvent(\r\n              this,\r\n              this._elementRef.nativeElement\r\n            )\r\n          );\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField\r\n      ? this._formField.getConnectedOverlayOrigin()\r\n      : this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  setDisabledState(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this.getParseFormat());\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._dateAdapter.getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(\r\n      new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement)\r\n    );\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(\r\n      new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement)\r\n    );\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  private registerDatepicker(value: MatDatetimepickerComponent<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n\r\n  private getDisplayFormat() {\r\n    switch (this._datepicker.type) {\r\n      case 'date':\r\n        return this._dateFormats.display.dateInput;\r\n      case 'datetime':\r\n        return this._dateFormats.display.datetimeInput;\r\n      case 'time':\r\n        return this._dateFormats.display.timeInput;\r\n      case 'month':\r\n        return this._dateFormats.display.monthInput;\r\n    }\r\n  }\r\n\r\n  private getParseFormat() {\r\n    let parseFormat;\r\n\r\n    switch (this._datepicker.type) {\r\n      case 'date':\r\n        parseFormat = this._dateFormats.parse.dateInput;\r\n        break;\r\n      case 'datetime':\r\n        parseFormat = this._dateFormats.parse.datetimeInput;\r\n        break;\r\n      case 'time':\r\n        parseFormat = this._dateFormats.parse.timeInput;\r\n        break;\r\n      case 'month':\r\n        parseFormat = this._dateFormats.parse.monthInput;\r\n        break;\r\n    }\r\n    if (!parseFormat) {\r\n      parseFormat = this._dateFormats.parse.dateInput;\r\n    }\r\n\r\n    return parseFormat;\r\n  }\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid\r\n      ? null\r\n      : { matDatepickerParse: { text: this._elementRef.nativeElement.value } };\r\n  };\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (\r\n    control: AbstractControl\r\n  ): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value)\r\n    );\r\n    return !this.min ||\r\n      !controlValue ||\r\n      this._dateAdapter.compareDatetime(this.min, controlValue) <= 0\r\n      ? null\r\n      : { matDatepickerMin: { min: this.min, actual: controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (\r\n    control: AbstractControl\r\n  ): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value)\r\n    );\r\n    return !this.max ||\r\n      !controlValue ||\r\n      this._dateAdapter.compareDatetime(this.max, controlValue) >= 0\r\n      ? null\r\n      : { matDatepickerMax: { max: this.max, actual: controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (\r\n    control: AbstractControl\r\n  ): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value)\r\n    );\r\n    return !this._dateFilter ||\r\n      !controlValue ||\r\n      this._dateFilter(controlValue, MatDatetimepickerFilterType.DATE)\r\n      ? null\r\n      : { matDatepickerFilter: true };\r\n  };\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null = Validators.compose([\r\n    this._parseValidator,\r\n    this._minValidator,\r\n    this._maxValidator,\r\n    this._filterValidator,\r\n  ]);\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: D | null) {\r\n    this._elementRef.nativeElement.value = value\r\n      ? this._dateAdapter.format(value, this.getDisplayFormat())\r\n      : '';\r\n  }\r\n}\r\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MatDatepickerIntl } from '@angular/material/datepicker';\r\nimport { asyncScheduler, merge, scheduled, Subscription } from 'rxjs';\r\nimport { MatDatetimepickerComponent } from './datetimepicker';\r\n\r\n@Component({\r\n  selector: 'mat-datetimepicker-toggle',\r\n  templateUrl: 'datetimepicker-toggle.html',\r\n  host: {\r\n    class: 'mat-datetimepicker-toggle',\r\n    // Bind the `click` on the host, rather than the inner `button`, so that we can call `stopPropagation`\r\n    // on it without affecting the user's `click` handlers. We need to stop it so that the input doesn't\r\n    // get focused automatically by the form field (See https://github.com/angular/components/pull/21856).\r\n    '(click)': '_open($event)',\r\n  },\r\n  exportAs: 'matDatetimepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatDatetimepickerToggleComponent<D>\r\n  implements AfterContentInit, OnChanges, OnDestroy\r\n{\r\n  /** Datepicker instance that the button will toggle. */\r\n  // eslint-disable-next-line @angular-eslint/no-input-rename\r\n  @Input('for') datetimepicker: MatDatetimepickerComponent<D>;\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    public _intl: MatDatepickerIntl,\r\n    private _changeDetectorRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  private _disabled: boolean;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined\r\n      ? this.datetimepicker.disabled\r\n      : !!this._disabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datetimepicker && !this.disabled) {\r\n      this.datetimepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datetimepicker\r\n      ? this.datetimepicker._disabledChange\r\n      : scheduled([], asyncScheduler);\r\n    const inputDisabled =\r\n      this.datetimepicker && this.datetimepicker._datepickerInput\r\n        ? this.datetimepicker._datepickerInput._disabledChange\r\n        : scheduled([], asyncScheduler);\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerDisabled,\r\n      inputDisabled\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","<button\r\n  [attr.aria-label]=\"_intl.openCalendarLabel\"\r\n  [disabled]=\"disabled\"\r\n  mat-icon-button\r\n  type=\"button\"\r\n>\r\n  <mat-icon [ngSwitch]=\"datetimepicker.type\">\r\n    <svg\r\n      *ngSwitchCase=\"'time'\"\r\n      fill=\"currentColor\"\r\n      focusable=\"false\"\r\n      height=\"100%\"\r\n      style=\"vertical-align: top\"\r\n      viewBox=\"0 0 24 24\"\r\n      width=\"100%\"\r\n    >\r\n      <path\r\n        d=\"M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z\"\r\n      ></path>\r\n    </svg>\r\n    <svg\r\n      *ngSwitchCase=\"'datetime'\"\r\n      fill=\"currentColor\"\r\n      focusable=\"false\"\r\n      height=\"100%\"\r\n      style=\"vertical-align: top\"\r\n      viewBox=\"0 0 24 24\"\r\n      width=\"100%\"\r\n    >\r\n      <path\r\n        d=\"M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z\"\r\n      ></path>\r\n    </svg>\r\n    <svg\r\n      *ngSwitchDefault\r\n      fill=\"currentColor\"\r\n      focusable=\"false\"\r\n      height=\"100%\"\r\n      style=\"vertical-align: top\"\r\n      viewBox=\"0 0 24 24\"\r\n      width=\"100%\"\r\n    >\r\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n      <path\r\n        d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"\r\n      />\r\n    </svg>\r\n  </mat-icon>\r\n</button>\r\n","import { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDatetimepickerCalendarComponent } from './calendar';\r\nimport { MatDatetimepickerCalendarBodyComponent } from './calendar-body';\r\nimport { MatDatetimepickerClockComponent } from './clock';\r\nimport {\r\n  MatDatetimepickerComponent,\r\n  MatDatetimepickerContentComponent,\r\n} from './datetimepicker';\r\nimport { MatDatetimepickerInputDirective } from './datetimepicker-input';\r\nimport { MatDatetimepickerToggleComponent } from './datetimepicker-toggle';\r\nimport { MatDatetimepickerMonthViewComponent } from './month-view';\r\nimport { MatDatetimepickerYearViewComponent } from './year-view';\r\nimport { MatDatetimepickerMultiYearViewComponent } from './multi-year-view';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n  ],\r\n  entryComponents: [MatDatetimepickerContentComponent],\r\n  declarations: [\r\n    MatDatetimepickerCalendarComponent,\r\n    MatDatetimepickerCalendarBodyComponent,\r\n    MatDatetimepickerClockComponent,\r\n    MatDatetimepickerComponent,\r\n    MatDatetimepickerToggleComponent,\r\n    MatDatetimepickerInputDirective,\r\n    MatDatetimepickerContentComponent,\r\n    MatDatetimepickerMonthViewComponent,\r\n    MatDatetimepickerYearViewComponent,\r\n    MatDatetimepickerMultiYearViewComponent,\r\n  ],\r\n  exports: [\r\n    MatDatetimepickerCalendarComponent,\r\n    MatDatetimepickerCalendarBodyComponent,\r\n    MatDatetimepickerClockComponent,\r\n    MatDatetimepickerComponent,\r\n    MatDatetimepickerToggleComponent,\r\n    MatDatetimepickerInputDirective,\r\n    MatDatetimepickerContentComponent,\r\n    MatDatetimepickerMonthViewComponent,\r\n    MatDatetimepickerYearViewComponent,\r\n    MatDatetimepickerMultiYearViewComponent,\r\n  ],\r\n})\r\nexport class MatDatetimepickerModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","i2.MatDatetimepickerCalendarBodyComponent","i1.DatetimeAdapter","i3.MatDatetimepickerCalendarBodyComponent","i3","i6.MatDatetimepickerClockComponent","i7.MatDatetimepickerMonthViewComponent","i8.MatDatetimepickerYearViewComponent","i9.MatDatetimepickerMultiYearViewComponent","i2.MatDatetimepickerCalendarComponent","i4","i5.DatetimeAdapter","i2"],"mappings":"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"}